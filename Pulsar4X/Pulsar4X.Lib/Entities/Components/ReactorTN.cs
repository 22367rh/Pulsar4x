using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Pulsar4X.Entities.Components
{
    public class ReactorDefTN : ComponentDefTN
    {
        /// <summary>
        /// Base Power generation technology for the reactor.
        /// </summary>
        private byte BaseTech;
        public byte baseTech
        {
            get { return BaseTech; }
        }

        /// <summary>
        /// Power generated by this design.
        /// </summary>
        private float PowerGen;
        public float powerGen
        {
            get { return PowerGen; }
        }

        /// <summary>
        /// Power(and explosion risk) multiplier for this design.
        /// </summary>
        private float BoostMod;
        public float boostMod
        {
            get { return BoostMod; }
        }

        /// <summary>
        /// Risk of explosion on component destruction.
        /// </summary>
        private float ExpRisk;
        public float expRisk
        {
            get { return ExpRisk; }
        }

        /// <summary>
        /// Constructor for reactor designs.
        /// </summary>
        /// <param name="Title">Name of the reactor that will be displayed to the faction.</param>
        /// <param name="BaseTechnology"> Base technology level of this reactor, 0=Pressurised water to 11=Vacuum energy</param>
        /// <param name="HS">Size of the reactor.</param>
        /// <param name="PowerBoost">Power boost for the reactor, must be in set increments(1.0-1.5) for ExpRisk to be handled correctly.</param>
        public ReactorDefTN(String Title, byte BaseTechnology, float HS, float PowerBoost)
        {
            Id = Guid.NewGuid();
            componentType = ComponentTypeTN.Reactor;

            Name = Title;
            BaseTech = BaseTechnology;
            size = HS;
            crew = (byte)(size * 2.0f);
            if (crew == 0)
                crew = 1;

            BoostMod = PowerBoost;

            htk = (byte)(size / 2.0f);

            PowerGen = (Constants.ReactorTN.Power[BaseTech] * BoostMod * size);

            cost = (decimal)(Math.Round(PowerGen * 3.0f));

            minerialsCost = new decimal[Constants.Minerals.NO_OF_MINERIALS];
            for (int mineralIterator = 0; mineralIterator < (int)Constants.Minerals.MinerialNames.MinerialCount; mineralIterator++)
            {
                minerialsCost[mineralIterator] = 0;
            }
            minerialsCost[(int)Constants.Minerals.MinerialNames.Boronide] = cost;

            if (BoostMod == 1.0f)
                ExpRisk = 5.0f;
            else if (BoostMod == 1.05f)
                ExpRisk = 7.0f;
            else if (BoostMod == 1.10f)
                ExpRisk = 10.0f;
            else if (BoostMod == 1.15f)
                ExpRisk = 12.0f;
            else if (BoostMod == 1.20f)
                ExpRisk = 16.0f;
            else if (BoostMod == 1.25f)
                ExpRisk = 20.0f;
            else if (BoostMod == 1.30f)
                ExpRisk = 25.0f;
            else if (BoostMod == 1.40f)
                ExpRisk = 30.0f;
            else if (BoostMod == 1.50f)
                ExpRisk = 35.0f;
            else
            {
                /// <summary>
                /// Invalid power mod.
                /// </summary>
                ExpRisk = 5.0f;
            }

            isMilitary = true;
            isDivisible = false;
            isObsolete = false;
            isSalvaged = false;
            isDivisible = false;
        }
    }

    public class ReactorTN : ComponentTN
    {
        /// <summary>
        /// Definition for this reactor component.
        /// </summary>
        private ReactorDefTN ReactorDef;
        public ReactorDefTN reactorDef
        {
            get { return ReactorDef; }
        }

        /// <summary>
        /// Constructor for this individual component.
        /// </summary>
        /// <param name="definition">Definition of the reactor.</param>
        public ReactorTN(ReactorDefTN definition)
        {
            ReactorDef = definition;

            Name = definition.Name;

            isDestroyed = false;
        }
    }
}
